# GreenMagic E-commerce Application

# Server Configuration
server.port=8080
# server.servlet.context-path=/api

# Database Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/greenmagic
spring.datasource.username=root
spring.datasource.password=password

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# JSON Configuration
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=Asia/Kolkata

# Logging
logging.level.org.sortoutinnovation.greenmagic=DEBUG
logging.level.org.hibernate.SQL=DEBUG

# File Upload (for product images)
#spring.servlet.multipart.enabled=true
#spring.servlet.multipart.max-file-size=10MB

# Disable Security for testing
#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration

# Error Handling
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=always
server.error.include-exception=true

# Validation Logging
logging.level.org.springframework.web.bind=DEBUG
logging.level.org.springframework.validation=DEBUG
logging.level.org.hibernate.validator=DEBUG

# ========================================
# SECURITY CONFIGURATION
# ========================================

# Spring Security Configuration
# Enable/Disable Spring Security (default: enabled)
spring.security.enabled=true

# Session Management
server.servlet.session.timeout=30m
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.secure=false
server.servlet.session.cookie.same-site=strict

# Security Headers
server.servlet.session.cookie.name=GREENMAGIC_SESSION
security.headers.frame=DENY
security.headers.content-type=nosniff
security.headers.xss=1; mode=block

# Password Encoding Configuration
# BCrypt strength (4-31, default: 10, we use 12 for high security)
security.password.bcrypt.strength=12

# Authentication Configuration
security.authentication.failure.max-attempts=5
security.authentication.failure.lockout-duration=15m

# CORS Configuration (handled in SecurityConfig.java)
# These are backup configurations
cors.allowed-origins=http://localhost:3000,http://localhost:4200,http://localhost:8080
cors.allowed-methods=GET,POST,PUT,DELETE,PATCH,OPTIONS
cors.allowed-headers=Authorization,Content-Type,X-Requested-With,Accept,Origin
cors.allow-credentials=true
cors.max-age=3600

# SSL/TLS Configuration (for production)
# Uncomment for HTTPS in production
#server.ssl.enabled=true
#server.ssl.key-store=classpath:keystore.p12
#server.ssl.key-store-password=changeit
#server.ssl.key-store-type=PKCS12
#server.ssl.key-alias=greenmagic
#security.require-ssl=true

# Security Logging
logging.level.org.springframework.security=INFO
logging.level.org.springframework.security.web=DEBUG

# Rate Limiting (if implemented)
security.rate-limit.enabled=true
security.rate-limit.requests-per-minute=60
security.rate-limit.login-attempts-per-minute=5

# JWT Configuration (for future implementation)
#jwt.secret=your-256-bit-secret-key-here
#jwt.expiration=86400000
#jwt.refresh-expiration=604800000

# API Documentation Security (if Swagger is added)
#springdoc.swagger-ui.disable-swagger-default-url=true
#springdoc.swagger-ui.path=/api-docs
#springdoc.api-docs.path=/api-docs

# Actuator Security
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized
management.endpoints.web.base-path=/actuator
management.security.enabled=true

# Environment-specific Security Settings
# Development Profile
spring.profiles.active=development

# ========================================
# DEVELOPMENT ENVIRONMENT SETTINGS
# ========================================
# Note: These settings are for development only
# For production, use environment variables or external configuration

# Development Security Settings
security.development.disable-csrf=true
security.development.enable-h2-console=false
security.development.show-sql=true

# ========================================
# PRODUCTION SECURITY NOTES
# ========================================
# For production deployment, consider:
# 1. Enable HTTPS (SSL/TLS)
# 2. Use environment variables for sensitive data
# 3. Enable security headers
# 4. Configure proper CORS origins
# 5. Set secure session cookies
# 6. Enable rate limiting
# 7. Configure proper logging levels
# 8. Use external configuration management
